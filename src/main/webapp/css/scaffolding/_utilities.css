/* Name:			Utilities

Contents:
	01. Placeholders
	02. Mixins
*/

/*  ========================================================================
	01. Placeholders
	======================================================================== */

%clearfix {

	&:after {
		content: '';
		display: inline-block;
		clear: both;
	}
}

%truncate {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

%material {
    box-shadow: 0 2px 5px rgba(0,0,0,.26);
}

%absolute-center {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
}

%absolute-vertical {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
}

%absolute-horizontal {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
}

/*  ========================================================================
	02. Mixins
	======================================================================== */

@mixin size($width, $height: $width) {
	height: $height;
	width: $width;
}

@mixin triangle($direction, $size, $color){
	content: '';
	display: block;
	position: absolute;
	height: 0; width: 0;

	@if ($direction == 'up'){
		border-bottom: $size solid $color;
		border-left: 1/2*$size solid transparent;
		border-right: 1/2*$size solid transparent;
	}
	@else if ($direction == 'down'){
		border-top: $size solid $color;
		border-left: 1/2*$size solid transparent;
		border-right: 1/2*$size solid transparent;
	}
	@else if ($direction == 'left'){
		border-top: 1/2*$size solid transparent;
		border-bottom: 1/2*$size solid transparent;
		border-right: $size solid $color;
	}
	@else if ($direction == 'right'){
		border-top: 1/2*$size solid transparent;
		border-bottom: 1/2*$size solid transparent;
		border-left: $size solid $color;
	}
}

@mixin placeholder {
	&::-webkit-input-placeholder { @content }
	&:-moz-placeholder 			 { @content }
	&::-moz-placeholder 		 { @content }
	&:-ms-input-placeholder 	 { @content }  
}

@mixin breakpoint($point) {
	@if $point == sm {
        @media (min-width: map-get($grid-breakpoints, sm))
		{ @content }
	}
	@else if $point == md {
        @media (min-width: map-get($grid-breakpoints, md))
		{ @content }
	}
	@else if $point == lg {
        @media (min-width: map-get($grid-breakpoints, lg))
		{ @content }
	}
    @else if $point == xl {
        @media (min-width: map-get($grid-breakpoints, xl))
        { @content }
    }
	// @else if $point == sm-only {
	// 	@media (min-width: $responsive__sm) and (max-width: ($responsive__md - 1))
	// 	{ @content }
	// }
	// @else if $point == md-only {
	// 	@media (min-width: $responsive__md) and (max-width: ($responsive__lg - 1))
	// 	{ @content }
	// }
	// @else if $point == sm-max {
	// 	@media (max-width: ($responsive__md - 1))
	// 	{ @content }		
	// }
	@else if $point == xs-only {
        @media (max-width: (map-get($grid-breakpoints, sm) - 1))
		{ @content }
	}
}

@include breakpoint(xs-only) {}
// @include breakpoint(sm-max) {}
@include breakpoint(sm) {}
@include breakpoint(md) {}
@include breakpoint(lg) {}
@include breakpoint(xl) {}
// @include breakpoint(sm-only) {}
// @include breakpoint(md-only) {}